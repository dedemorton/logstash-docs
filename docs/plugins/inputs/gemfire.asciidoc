[[plugins-inputs-gemfire]]
=== gemfire

NOTE: This plugin cannot be installed on the current version of Logstash.

Push events to a GemFire region.

GemFire is an object database.

To use this plugin you need to add gemfire.jar to your CLASSPATH.
Using format=json requires jackson.jar too; use of continuous
queries requires antlr.jar.

Note: this plugin has only been tested with GemFire 7.0.


&nbsp;

==== Synopsis

This plugin supports the following configuration options:

Required configuration options:

[source,json]
--------------------------
gemfire {
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-inputs-gemfire-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-inputs-gemfire-cache_name>> |<<string,string>>|No|`"logstash"`
| <<plugins-inputs-gemfire-cache_xml_file>> |<<string,string>>|No|`nil`
| <<plugins-inputs-gemfire-codec>> |<<codec,codec>>|No|`"plain"`
| <<plugins-inputs-gemfire-interest_regexp>> |<<string,string>>|No|`".*"`
| <<plugins-inputs-gemfire-query>> |<<string,string>>|No|`nil`
| <<plugins-inputs-gemfire-region_name>> |<<string,string>>|No|`"Logstash"`
| <<plugins-inputs-gemfire-serialization>> |<<string,string>>|No|`nil`
| <<plugins-inputs-gemfire-tags>> |<<array,array>>|No|
| <<plugins-inputs-gemfire-threads>> |<<number,number>>|No|`1`
| <<plugins-inputs-gemfire-type>> |<<string,string>>|No|
|=======================================================================


==== Details

&nbsp;

[[plugins-inputs-gemfire-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

Add a field to an event

[[plugins-inputs-gemfire-cache_name]]
===== `cache_name` 

  * Value type is <<string,string>>
  * Default value is `"logstash"`

Your client cache name

[[plugins-inputs-gemfire-cache_xml_file]]
===== `cache_xml_file` 

  * Value type is <<string,string>>
  * Default value is `nil`

The path to a GemFire client cache XML file.

Example:

     <client-cache>
       <pool name="client-pool" subscription-enabled="true" subscription-redundancy="1">
           <locator host="localhost" port="31331"/>
       </pool>
       <region name="Logstash">
           <region-attributes refid="CACHING_PROXY" pool-name="client-pool" >
           </region-attributes>
       </region>
     </client-cache>


[[plugins-inputs-gemfire-codec]]
===== `codec` 

  * Value type is <<codec,codec>>
  * Default value is `"plain"`

The codec used for input data. Input codecs are a convenient method for decoding your data before it enters the input, without needing a separate filter in your Logstash pipeline.

[[plugins-inputs-gemfire-interest_regexp]]
===== `interest_regexp` 

  * Value type is <<string,string>>
  * Default value is `".*"`

A regexp to use when registering interest for cache events.
Ignored if a :query is specified.

[[plugins-inputs-gemfire-query]]
===== `query` 

  * Value type is <<string,string>>
  * Default value is `nil`

A query to run as a GemFire "continuous query"; if specified it takes
precedence over :interest_regexp which will be ignore.

Important: use of continuous queries requires subscriptions to be enabled on the client pool.

[[plugins-inputs-gemfire-region_name]]
===== `region_name` 

  * Value type is <<string,string>>
  * Default value is `"Logstash"`

The region name

[[plugins-inputs-gemfire-serialization]]
===== `serialization` 

  * Value type is <<string,string>>
  * Default value is `nil`

How the message is serialized in the cache. Can be one of "json" or "plain"; default is plain

[[plugins-inputs-gemfire-tags]]
===== `tags` 

  * Value type is <<array,array>>
  * There is no default value for this setting.

Add any number of arbitrary tags to your event.

This can help with processing later.

[[plugins-inputs-gemfire-threads]]
===== `threads` 

  * Value type is <<number,number>>
  * Default value is `1`



[[plugins-inputs-gemfire-type]]
===== `type` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a `type` field to all events handled by this input.

Types are used mainly for filter activation.

The type is stored as part of the event itself, so you can
also use the type to search for it in Kibana.

If you try to set a type on an event that already has one (for
example when you send an event from a shipper to an indexer) then
a new input will not override the existing type. A type set at
the shipper stays with that event for its life even
when sent to another Logstash server.


