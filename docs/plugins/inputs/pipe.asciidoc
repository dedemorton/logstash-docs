[[plugins-inputs-pipe]]
=== pipe

* Version: 3.0.2
* Released on: 2016-07-14
* https://github.com/logstash-plugins/logstash-input-pipe/blob/master/CHANGELOG.md#302[Changelog]
* Compatible: 5.1.2, 5.1.1, 5.0.0, 2.4.1, 2.4.0



Stream events from a long running command pipe.

By default, each event is assumed to be one line. If you
want to join lines, you'll want to use the multiline codec.


&nbsp;

==== Synopsis

This plugin supports the following configuration options:

Required configuration options:

[source,json]
--------------------------
pipe {
    command => ...
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-inputs-pipe-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-inputs-pipe-codec>> |<<codec,codec>>|No|`"plain"`
| <<plugins-inputs-pipe-command>> |<<string,string>>|Yes|
| <<plugins-inputs-pipe-enable_metric>> |<<boolean,boolean>>|No|`true`
| <<plugins-inputs-pipe-id>> |<<string,string>>|No|
| <<plugins-inputs-pipe-tags>> |<<array,array>>|No|
| <<plugins-inputs-pipe-type>> |<<string,string>>|No|
|=======================================================================


==== Details

&nbsp;

[[plugins-inputs-pipe-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

Add a field to an event

[[plugins-inputs-pipe-codec]]
===== `codec` 

  * Value type is <<codec,codec>>
  * Default value is `"plain"`

The codec used for input data. Input codecs are a convenient method for decoding your data before it enters the input, without needing a separate filter in your Logstash pipeline.

[[plugins-inputs-pipe-command]]
===== `command` 

  * This is a required setting.
  * Value type is <<string,string>>
  * There is no default value for this setting.

TODO(sissel): This should switch to use the `line` codec by default
once we switch away from doing 'readline'
Command to run and read events from, one line at a time.

Example:
[source,ruby]
   command => "echo hello world"

[[plugins-inputs-pipe-enable_metric]]
===== `enable_metric` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Disable or enable metric collection and reporting for this specific plugin instance. 
By default we record metrics from all plugins, but you can disable metrics collection
for a specific plugin.

[[plugins-inputs-pipe-id]]
===== `id` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a unique named `ID` to the plugin instance. This `ID` is used for tracking
information for a specific configuration of the plugin and will be useful for 
debugging purposes.

[source,sh]
--------------------------------------------------
output {
 stdout {
   id => "debug_stdout"
 }
}
--------------------------------------------------

If you don't explicitly set this field, Logstash will generate a unique name.

[[plugins-inputs-pipe-tags]]
===== `tags` 

  * Value type is <<array,array>>
  * There is no default value for this setting.

Add any number of arbitrary tags to your event.

This can help with processing later.

[[plugins-inputs-pipe-type]]
===== `type` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a `type` field to all events handled by this input.

Types are used mainly for filter activation.

The type is stored as part of the event itself, so you can
also use the type to search for it in Kibana.

If you try to set a type on an event that already has one (for
example when you send an event from a shipper to an indexer) then
a new input will not override the existing type. A type set at
the shipper stays with that event for its life even
when sent to another Logstash server.


