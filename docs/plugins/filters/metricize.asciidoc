[[plugins-filters-metricize]]
=== metricize

NOTE: This is a community-maintained plugin! It does not ship with Logstash by default, but it is easy to install by running `bin/logstash-plugin install logstash-filter-metricize`.


The metricize filter takes complex events containing a number of metrics
and splits these up into multiple events, each holding a single metric.

Example:

    Assume the following filter configuration:

    filter {
      %PLUGIN% {
        metrics => [ "metric1", "metric2" ]
      }
    }

    Assuming the following event is passed in:

    {
         type => "type A"
         metric1 => "value1"
         metric2 => "value2"
    }

    This will result in the following 2 events being generated in addition to the original event:

    {                               {
        type => "type A"                type => "type A"
        metric => "metric1"             metric => "metric2"
        value => "value1"               value => "value2"
    }                               }


&nbsp;

==== Synopsis

This plugin supports the following configuration options:

Required configuration options:

[source,json]
--------------------------
metricize {
    metrics => ...
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-filters-metricize-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-metricize-add_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-metricize-drop_original_event>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-metricize-enable_metric>> |<<boolean,boolean>>|No|`true`
| <<plugins-filters-metricize-id>> |<<string,string>>|No|
| <<plugins-filters-metricize-metric_field_name>> |<<string,string>>|No|`"metric"`
| <<plugins-filters-metricize-metrics>> |<<array,array>>|Yes|
| <<plugins-filters-metricize-periodic_flush>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-metricize-remove_field>> |<<array,array>>|No|`[]`
| <<plugins-filters-metricize-remove_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-metricize-value_field_name>> |<<string,string>>|No|`"value"`
|=======================================================================


==== Details

&nbsp;

[[plugins-filters-metricize-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

If this filter is successful, add any arbitrary fields to this event.
Field names can be dynamic and include parts of the event using the `%{field}`.

Example:
[source,ruby]
    filter {
      %PLUGIN% {
        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
      }
    }
[source,ruby]
    # You can also add multiple fields at once:
    filter {
      %PLUGIN% {
        add_field => {
          "foo_%{somefield}" => "Hello world, from %{host}"
          "new_field" => "new_static_value"
        }
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add field `foo_hello` if it is present, with the
value above and the `%{host}` piece replaced with that value from the
event. The second example would also add a hardcoded field.

[[plugins-filters-metricize-add_tag]]
===== `add_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, add arbitrary tags to the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      %PLUGIN% {
        add_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also add multiple tags at once:
    filter {
      %PLUGIN% {
        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).

[[plugins-filters-metricize-drop_original_event]]
===== `drop_original_event` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Flag indicating whether the original event should be dropped or not.

[[plugins-filters-metricize-enable_metric]]
===== `enable_metric` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Disable or enable metric logging for this specific plugin instance
by default we record all the metrics we can, but you can disable metrics collection
for a specific plugin.

[[plugins-filters-metricize-id]]
===== `id` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a unique `ID` to the plugin instance, this `ID` is used for tracking
information for a specific configuration of the plugin.

```
output {
 stdout {
   id => "ABC"
 }
}
```

If you don't explicitely set this variable Logstash will generate a unique name.

[[plugins-filters-metricize-metric_field_name]]
===== `metric_field_name` 

  * Value type is <<string,string>>
  * Default value is `"metric"`

Name of the field the metric name will be written to.

[[plugins-filters-metricize-metrics]]
===== `metrics` 

  * This is a required setting.
  * Value type is <<array,array>>
  * There is no default value for this setting.

A new matrics event will be created for each metric field in this list.
All fields in this list will be removed from generated events.

[[plugins-filters-metricize-periodic_flush]]
===== `periodic_flush` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Call the filter flush method at regular interval.
Optional.

[[plugins-filters-metricize-remove_field]]
===== `remove_field` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary fields from this event.
Fields names can be dynamic and include parts of the event using the %{field}
Example:
[source,ruby]
    filter {
      %PLUGIN% {
        remove_field => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple fields at once:
    filter {
      %PLUGIN% {
        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the field with name `foo_hello` if it is present. The second
example would remove an additional, non-dynamic field.

[[plugins-filters-metricize-remove_tag]]
===== `remove_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary tags from the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      %PLUGIN% {
        remove_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple tags at once:
    filter {
      %PLUGIN% {
        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the tag `foo_hello` if it is present. The second example
would remove a sad, unwanted tag as well.

[[plugins-filters-metricize-value_field_name]]
===== `value_field_name` 

  * Value type is <<string,string>>
  * Default value is `"value"`

Name of the field the metric value will be written to.


